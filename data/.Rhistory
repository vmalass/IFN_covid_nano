borne_VT1<- mat_pat_clean[vec_VT1==T,] #nouvel obj avec que les ligne qui ont VT1 en real time point
borne_VT1<- arrange(borne_VT1,numero_patient) #ordo par n° pat
round(median(borne_VT1$RSAD2),5) # calcul de la median poàur le gene RSAD2
# median = 26527
round(mad(borne_VT1$RSAD2, low = F , high = F),5) # calcul du MAD (median absolut deviation) (= sd pour la moyene)
# MAD = 16978.74
borne_VT1$RSAD2 < median(borne_VT1$RSAD2)-1.2*mad(borne_VT1$RSAD2, low = F , high = F)
groupe1_J1 <- subset(borne_VT1, borne_VT1$RSAD2 < median(borne_VT1$RSAD2)-1.2*mad(borne_VT1$RSAD2, low = F , high = F))
num_pat_J1 <- groupe1_J1$numero_patient # 2  13 49 62
### 3.1.1- RSAD2 / VT1----
#permet d'obtenir les 40 patients qui ont J1 et J7 avec tout les autre prelevement
num_pat <- mat_pat_clean$numero_patient
new <- mat_pat_clean$numero_patient %in% num_pat
new1 <- mat_pat_clean[new==T,]
length(unique(new1$numero_patient))
new <- mat_pat_clean$numero_patient %in% num_pat_J1
groupe_RP_autre <- mat_pat_clean[new==F,]
numgp_RP <- groupe_RP_autre$numero_patient
GP3 <- new1$numero_patient %in% numgp_RP
GP3 <- new1[GP3==F,]
ggplot(data = GP3, aes_string(x="jours_prelevement", y= "RSAD2", color = "numero_patient ", group = "numero_patient"))+ geom_line() + geom_point() + ggtitle("Patients NR avec borne J1 à J6 sur le gène RSAD2")+scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x)))
YY <- as.character(num_pat_J1)
GP5 <- GP3 %>% mutate(numero_patient  = as.character(numero_patient))
GP5$numero_patient
couleur_patient <- mat_pat_clean$numero_patient %in% YY
couleur_patient
GP5<- cbind(mat_pat_clean, couleur_patient)
ggplot(data = GP5, aes_string(x="jours_prelevement", y= "RSAD2", color = "couleur_patient ", group = "numero_patient"))+ geom_line() + geom_point() + ggtitle("Patients NR avec borne J1 à J6 sur le gène RSAD2")+scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x)))
## 3.2-bornage VT1 / CXCL10 / real_time_point -----
borne1a6 <- mat_pat_clean[1:35,]
borne1a6<- arrange(borne1a6,numero_patient)
round(median(borne1a6$CXCL10),5)
round(mad(borne1a6$CXCL10, low = F , high = F),5)
borne1a6$CXCL10 < median(borne1a6$CXCL10)-0.8*mad(borne1a6$CXCL10, low = F , high = F)
groupe1_J1 <- subset(borne1a6, borne1a6$CXCL10 < median(borne1a6$CXCL10)-0.8*mad(borne1a6$CXCL10, low = F , high = F))  # 13 49 51
num_pat_J1 <- groupe1_J1$numero_patient
### 3.2.1-CXCL10 / VT1-----
#permet d'obtenir les 40 patients qui ont J1 et J7 avec tout les autre prelevement
num_pat <- mat_pat_clean$numero_patient
new <- mat_pat_clean$numero_patient %in% num_pat
new1 <- mat_pat_clean[new==T,]
length(unique(new1$numero_patient))
new <- mat_pat_clean$numero_patient %in% num_pat_J1
groupe_RP_autre <- mat_pat_clean[new==F,]
numgp_RP <- groupe_RP_autre$numero_patient
GP3 <- new1$numero_patient %in% numgp_RP
GP3 <- new1[GP3==F,]
ggplot(data = GP3, aes_string(x="jours_prelevement", y= "CXCL10", color = "numero_patient ", group = "numero_patient"))+ geom_line() + geom_point() + ggtitle("Patients NR avec borne J1 à J6 sur le gène CXCL10")+scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x)))
YY <- as.character(num_pat_J1)
GP5 <- GP3 %>% mutate(numero_patient  = as.character(numero_patient))
GP5$numero_patient
couleur_patient <- mat_pat_clean$numero_patient %in% YY
couleur_patient
GP5<- cbind(mat_pat_clean, couleur_patient)
ggplot(data = GP5, aes_string(x="jours_prelevement", y= "CXCL10", color = "couleur_patient ", group = "numero_patient"))+ geom_line() + geom_point() + ggtitle("Patients NR avec borne J1 à J6 sur le gène CXCL10")+scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x)))
## 3.3-bornage VT1 / IFI27 / real_time_point -----
borne1a6 <- mat_pat_clean[1:35,]
borne1a6<- arrange(borne1a6,numero_patient)
round(median(borne1a6$IFI27),5)
round(mad(borne1a6$IFI27, low = F , high = F),5)
borne1a6$IFI27 < median(borne1a6$IFI27)-0.8*mad(borne1a6$IFI27, low = F , high = F)
groupe1_J1 <- subset(borne1a6, borne1a6$IFI27 < median(borne1a6$IFI27)-0.9*mad(borne1a6$IFI27, low = F , high = F))  #10 49
num_pat_J1 <- groupe1_J1$numero_patient
### 3.3.1-IFI27 / VT1-----
#permet d'obtenir les 40 patients qui ont J1 et J7 avec tout les autre prelevement
num_pat <- mat_pat_clean$numero_patient
new <- mat_pat_clean$numero_patient %in% num_pat
new1 <- mat_pat_clean[new==T,]
length(unique(new1$numero_patient))
new <- mat_pat_clean$numero_patient %in% num_pat_J1
groupe_RP_autre <- mat_pat_clean[new==F,]
numgp_RP <- groupe_RP_autre$numero_patient
GP3 <- new1$numero_patient %in% numgp_RP
GP3 <- new1[GP3==F,]
ggplot(data = GP3, aes_string(x="jours_prelevement", y= "IFI27", color = "numero_patient ", group = "numero_patient"))+ geom_line() + geom_point() + ggtitle("Patients NR avec borne J1 à J6 sur le gène IFI27")+scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x)))
YY <- as.character(num_pat_J1)
GP5 <- GP3 %>% mutate(numero_patient  = as.character(numero_patient))
GP5$numero_patient
couleur_patient <- mat_pat_clean$numero_patient %in% YY
couleur_patient
GP5<- cbind(mat_pat_clean, couleur_patient)
ggplot(data = GP5, aes_string(x="jours_prelevement", y= "IFI27", color = "couleur_patient ", group = "numero_patient"))+ geom_line() + geom_point() + ggtitle("Patients NR avec borne J1 à J6 sur le gène IFI27")+scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x)))
# 4-Bornage VT2 -----
## 4.1-bornage VT2 / RSAD2 / real_time_point -----
borne7a13 <- mat_pat_clean[36:74,]
borne7a13<- arrange(borne7a13,numero_patient)
round(median(borne7a13$RSAD2),5)
round(mad(borne7a13$RSAD2, low = F , high = F),5)
borne7a13$RSAD2 > median(borne7a13$RSAD2)+3*mad(borne7a13$RSAD2, low = F , high = F)
groupe1_J7 <- subset(borne7a13, borne7a13$RSAD2 > median(borne7a13$RSAD2)+3*mad(borne7a13$RSAD2, low = F , high = F))  # 4  6  10 15 21 23 26 29 48 60 61
num_pat_J7 <- groupe1_J7$numero_patient
### 4.1.1-RSAD2 / VT2-----
#permet d'obtenir les 40 patients qui ont J1 et J7 avec tout les autre prelevement
num_pat <- mat_pat_clean$numero_patient
new <- mat_pat_clean$numero_patient %in% num_pat
new1 <- mat_pat_clean[new==T,]
length(unique(new1$numero_patient))
new <- mat_pat_clean$numero_patient %in% num_pat_J7
groupe_RP_autre <- mat_pat_clean[new==F,]
numgp_RP <- groupe_RP_autre$numero_patient
GP3 <- new1$numero_patient %in% numgp_RP
GP3 <- new1[GP3==F,]
ggplot(data = GP3, aes_string(x="jours_prelevement", y= "RSAD2", color = "numero_patient ", group = "numero_patient"))+ geom_line() + geom_point() + ggtitle("Patients RP avec borne J7 à J13 sur le gène RSAD2")+scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x)))
YY <- as.character(num_pat_J7)
GP5 <- GP3 %>% mutate(numero_patient  = as.character(numero_patient))
GP5$numero_patient
couleur_patient <- mat_pat_clean$numero_patient %in% YY
couleur_patient
GP5<- cbind(mat_pat_clean, couleur_patient)
ggplot(data = GP5, aes_string(x="jours_prelevement", y= "RSAD2", color = "couleur_patient ", group = "numero_patient"))+ geom_line() + geom_point() + ggtitle("Patients RP avec borne J7 à J13 sur le gène RSAD2")+scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x)))
## 4.2- bornage VT2 / CXCL10 / real_time_point-----
borne7a13 <- mat_pat_clean[36:74,]
borne7a13<- arrange(borne7a13,numero_patient)
round(median(borne7a13$CXCL10),5)
round(mad(borne7a13$CXCL10, low = F , high = F),5)
borne7a13$CXCL10 > median(borne7a13$CXCL10)+3*mad(borne7a13$CXCL10, low = F , high = F)
groupe1_J7 <- subset(borne7a13, borne7a13$CXCL10 > median(borne7a13$CXCL10)+3*mad(borne7a13$CXCL10, low = F , high = F))  #4  6  10 15 21 26 29 48 61
num_pat_J7 <- groupe1_J7$numero_patient
### 4.2.1- CXCL10 / VT2-----
#permet d'obtenir les 40 patients qui ont J1 et J7 avec tout les autre prelevement
num_pat <- mat_pat_clean$numero_patient
new <- mat_pat_clean$numero_patient %in% num_pat
new1 <- mat_pat_clean[new==T,]
length(unique(new1$numero_patient))
new <- mat_pat_clean$numero_patient %in% num_pat_J7
groupe_RP_autre <- mat_pat_clean[new==F,]
numgp_RP <- groupe_RP_autre$numero_patient
GP3 <- new1$numero_patient %in% numgp_RP
GP3 <- new1[GP3==F,]
ggplot(data = GP3, aes_string(x="jours_prelevement", y= "CXCL10", color = "numero_patient ", group = "numero_patient"))+ geom_line() + geom_point() + ggtitle("Patients RP avec borne J7 à J14 sur le gène CXCL10")+scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x)))
YY <- as.character(num_pat_J7)
GP5 <- GP3 %>% mutate(numero_patient  = as.character(numero_patient))
GP5$numero_patient
couleur_patient <- mat_pat_clean$numero_patient %in% YY
couleur_patient
GP5<- cbind(mat_pat_clean, couleur_patient)
ggplot(data = GP5, aes_string(x="jours_prelevement", y= "CXCL10", color = "couleur_patient ", group = "numero_patient"))+ geom_line() + geom_point() + ggtitle("Patients RP avec borne J7 à J14 sur le gène CXCL10")+scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x)))
## 4.3- bornage VT2 / IFI27 / real_time_point-----
borne7a13 <- mat_pat_clean[36:74,]
borne7a13<- arrange(borne7a13,numero_patient)
round(median(borne7a13$IFI27),5)
round(mad(borne7a13$IFI27, low = F , high = F),5)
borne7a13$IFI27 > median(borne7a13$IFI27)+1.8*mad(borne7a13$IFI27, low = F , high = F)
groupe1_J7 <- subset(borne7a13, borne7a13$IFI27 > median(borne7a13$IFI27)+1.8*mad(borne7a13$IFI27, low = F , high = F))  # 1  10 15 48 59
num_pat_J7 <- groupe1_J7$numero_patient
### 4.3.1-IFI27 / VT2-----
#permet d'obtenir les 40 patients qui ont V1 et V2 avec tout les autre prelevement
num_pat <- mat_pat_clean$numero_patient
new <- mat_pat_clean$numero_patient %in% num_pat
new1 <- mat_pat_clean[new==T,]
length(unique(new1$numero_patient))
new <- mat_pat_clean$numero_patient %in% num_pat_J7
groupe_RP_autre <- mat_pat_clean[new==F,]
numgp_RP <- groupe_RP_autre$numero_patient
GP3 <- new1$numero_patient %in% numgp_RP
GP3 <- new1[GP3==F,]
ggplot(data = GP3, aes_string(x="jours_prelevement", y= "IFI27", color = "numero_patient ", group = "numero_patient"))+ geom_line() + geom_point() + ggtitle("Patients RP avec borne J7 à J13 sur le gène IFI27 1.8MAD")+scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x)))
YY <- as.character(num_pat_J7)
GP5 <- GP3 %>% mutate(numero_patient  = as.character(numero_patient))
GP5$numero_patient
couleur_patient <- mat_pat_clean$numero_patient %in% YY
couleur_patient
GP5<- cbind(mat_pat_clean, couleur_patient)
ggplot(data = GP5, aes_string(x="jours_prelevement", y= "IFI27", color = "couleur_patient ", group = "numero_patient"))+ geom_line() + geom_point() + ggtitle("Patients RP avec borne J7 à J13 sur le gène IFI27 1.8MAD")+scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x)))
# Pour VT1 et VT2 on selectionne tout les patients qui ressorte au moins dans deux gènes pour les attribuer aux groupes NR & RP
# NR 13 / 49
# RP 4 / 6 / 10 / 15 / 21 / 26 / 29 / 48 / 61
View(GP5)
# 1-library -----
library(openxlsx)
library(umap)
library(factoextra)
library(S4Vectors)
library(magrittr)
library(DESeq2)
library(ggplot2)
library(scater)
library(Seurat)
library(tidyverse)
library(gridExtra)
library(clustree)
library(fpc)
library(scran)
library(pheatmap)
library(RColorBrewer)
library(gplots)
library(dplyr)
library(forcats)
library(scales)
library(pheatmap)
library(apeglm)
# 2-ouverture des fichier----
setwd("~/Documents/JM/NanoString/NanoString_Covid/nanostring_covid/data") #folder data
rm(list = ls())
load("1.2_mat_pat_clean.rds") #ouverture de la svg
mat_pat_clean_sans_R_T<-mat_pat_clean[20:154,]
load("HVG_scran.rds") #ouverture de la svg
my_palette = colorRampPalette(c("royalblue4", "lightskyblue3", "white", "lightsalmon3","darkred"))(n = 256)
# 3-DE T vs R+RP en VT1 all genes -----
## 3.1-Creation de la matrice----
mat_VT1 <- mat_pat_clean[which(mat_pat_clean$real_time_point %in% "VT1"),] #DF avce tout les VT1
mat_T <- mat_pat_clean[which(mat_pat_clean$real_time_point %in% "T"),] #DF avec tout les T
mat_VT1<-rbind(mat_VT1, mat_T) # DF avec VT1 & T
mat_NR<-mat_VT1[1:5,]#conservation des NR
mat_VT1<-mat_VT1[6:42,] #suppression des NR pour pouvoir faire le DE avec la colonne condition biologique (covid vs T)
mat_VT1<- arrange(mat_VT1,numero_patient) #ordo par n° pat
coldata_mat<-as.data.frame(mat_VT1$condition_biologique)
row.names(coldata_mat)<-row.names(mat_VT1)
coldata_num<-mat_VT1$numero_patient
mat_VT1[,737:744]<-NULL
## 3.2-Gene DE DESeq2 all gene----
colnames(coldata_mat)<-"condition"
dds_mat <- DESeqDataSetFromMatrix(countData = t(mat_VT1), colData = coldata_mat,
design = ~ condition) #creation de l'obj deseq2
dds_mat <- dds_mat[rowSums(counts(dds_mat)) >= 10,] #pre-filtrage sup les genes inf ou egale a 10
rld <- rlogTransformation(dds_mat, blind=FALSE) #transforme le dds en log pour utilisation en heatmap
##### T
dds_mat$condition <- relevel(dds_mat$condition, ref = "T")
dds_mat <- DESeq(dds_mat)
resultsNames(dds_mat)
res <- results(dds_mat, contrast=c("condition", "T", "Covid"))
# covid vs T
res_cov_T <- lfcShrink(dds_mat, coef = "condition_Covid_vs_T", type = "apeglm", lfcThreshold = 1) #resultat avec le calcule de la pval ajuste a partir de 1 et pas 0 (par rapport au threshold) : https://support.bioconductor.org/p/113664/
cov_T <- res_cov_T[res_cov_T$svalue < 0.05 & !is.na(res_cov_T$svalue) & res_cov_T$log2FoldChange > 1 | res_cov_T$svalue < 0.05 & !is.na(res_cov_T$svalue) & res_cov_T$log2FoldChange < -1 , ]   #tris des genes avec sval<5% et L2FC <-1 & >1
cov_T_all_gene <- as.data.frame(cov_T)
data_cov_T_VT2 <- assay(rld)[res_cov_T$svalue < 0.05 & !is.na(res_cov_T$svalue) & res_cov_T$log2FoldChange > 1 | res_cov_T$svalue < 0.05 & !is.na(res_cov_T$svalue) & res_cov_T$log2FoldChange < -1 , ]    #tris des genes avec sval<5% et L2FC <-1 & >1 + utilisation de assay(rld) pour passer en log
annC_VT2_DE <- data.frame(condition= coldata_mat)
rownames(annC_VT2_DE) <- colnames(data_cov_T_VT2)
heatmap_NR_R_VT2 <- pheatmap(data_cov_T_VT2,
scale="row",
fontsize_row=10,
annotation_col = annC_VT2_DE,
color = my_palette,
cutree_rows = 2,
main = "DE à partir de tout les gènes et des prélèvements VT2 avec NRvsR",
labels_col = coldata_num,
cluster_cols = T,
cluster_rows = T,)
# 4-DE T vs RP en VT2 all gene-----
mat_VT2 <- mat_pat_clean[which(mat_pat_clean$real_time_point %in% "VT2"),] #DF avce tout les VT1
mat_VT2 <-rbind(mat_VT2, mat_T) # DF avec VT1 & T
mat_VT2<- arrange(mat_VT2,numero_patient) #ordo par n° pat
coldata_mat<-as.data.frame(mat_VT2$REPONSE)
row.names(coldata_mat)<-row.names(mat_VT2)
coldata_num<-mat_VT2$numero_patient
mat_VT2[,737:744]<-NULL
## 4.2-Gene DE DESeq2 all gene----
colnames(coldata_mat)<-"condition"
dds_mat <- DESeqDataSetFromMatrix(countData = t(mat_VT2), colData = coldata_mat,
design = ~ condition) #creation de l'obj deseq2
dds_mat <- dds_mat[rowSums(counts(dds_mat)) >= 10,] #pre-filtrage sup les genes inf ou egale a 10
rld <- rlogTransformation(dds_mat, blind=FALSE) #transforme le dds en log pour utilisation en heatmap
##### T
dds_mat$condition <- relevel(dds_mat$condition, ref = "T")
dds_mat <- DESeq(dds_mat)
resultsNames(dds_mat)
res <- results(dds_mat, contrast=c("condition", "T", "RP"))
# RP vs T
res_RP_T <- lfcShrink(dds_mat, coef = "condition_RP_vs_T", type = "apeglm", lfcThreshold = 1) #resultat avec le calcule de la pval ajuste a partir de 1 et pas 0 (par rapport au threshold) : https://support.bioconductor.org/p/113664/
RP_T <- res_RP_T[res_RP_T$svalue < 0.05 & !is.na(res_RP_T$svalue) & res_RP_T$log2FoldChange > 1 | res_RP_T$svalue < 0.05 & !is.na(res_cov_T$svalue) & res_cov_T$log2FoldChange < -1 , ]   #tris des genes avec sval<5% et L2FC <-1 & >1
RP_T_all_gene <- as.data.frame(RP_T)
data_RP_T_VT2 <- assay(rld)[res_RP_T$svalue < 0.05 & !is.na(res_RP_T$svalue) & res_RP_T$log2FoldChange > 1 | res_RP_T$svalue < 0.05 & !is.na(res_cov_T$svalue) & res_cov_T$log2FoldChange < -1 , ]    #tris des genes avec sval<5% et L2FC <-1 & >1 + utilisation de assay(rld) pour passer en log
annC_VT2_DE <- data.frame(condition= coldata_mat)
rownames(annC_VT2_DE) <- colnames(data_RP_T_VT2)
heatmap_NR_R_VT2 <- pheatmap(data_RP_T_VT2,
scale="row",
fontsize_row=10,
annotation_col = annC_VT2_DE,
annotation_colors = list(condition = c( NR = "#7570BE",
R="#F15854",
RP = "#882255",
"T"= "#117733")),
color = my_palette,
cutree_rows = 2,
main = "DE à partir de tout les gènes et des prélèvements VT2 avec NRvsR",
labels_col = coldata_num,
cluster_cols = T,
cluster_rows = T,)
name_RP_T_all_gene<-rownames(RP_T_all_gene)
name_cov_T_all_gene<-rownames(cov_T_all_gene)
name_inter_cov_RP_T_gene<-intersect(name_RP_T_all_gene,name_cov_T_all_gene) #intersection entre les deux vecteurs
name_unique_RP_T_gene<-setdiff(name_RP_T_all_gene,name_cov_T_all_gene)
name_unique_cov_T_gene<-setdiff(name_cov_T_all_gene,name_RP_T_all_gene)
# 5-Resume----
## 5.1-18genes VT1+VT2-----
mat_VT1 <- mat_pat_clean[which(mat_pat_clean$real_time_point %in% "VT1"),] #DF avce tout les VT1
mat_VT2 <- mat_pat_clean[which(mat_pat_clean$real_time_point %in% "VT2"),] #DF avce tout les VT1
mat_T <- mat_pat_clean[which(mat_pat_clean$real_time_point %in% "T"),] #DF avec tout les T
mat<-rbind(mat_VT1,mat_VT2)
mat<-rbind(mat,mat_T)
mat_orig<-mat
name_unique_cov_T_gene<-as.data.frame(name_unique_cov_T_gene)    ##creation d'un DF
test <- colnames(mat) %in% name_unique_cov_T_gene$name_unique_cov_T_gene  #creation d'un vecteur logique T F, les T correspondent au nom identique dans les deux
mat<- mat[,test==T]   #ne garde en colone que les True
coldata<-mat_orig[,737:743] # creation du coldata pour les heatmap
coldata_num<- coldata$numero_patient  # ordo
coldata[,1:6]<-NULL # sup des data non utile
mat<-t(mat)  # translation de la matrice
all(rownames(coldata) == colnames(mat)) #verif col et row identique
all(rownames(coldata) %in% colnames(mat)) #attention de verif pas l'ordre mais seulement présence
mat_log<-log1p(mat) # passage en log 1 p pour les heatmap
annC <- data.frame(condition= coldata) # pour les annotation en col pour la heatmap
rownames(annC) <- colnames(mat_log)  # pour les annotation en col pour la heatmap
all(rownames(annC) == colnames(mat)) #vérif du même ordre / position
annC$real_time_point <- mat_orig$real_time_point  # ajout real_time_point
pheatmap(mat_log,
scale="row",
fontsize_row=15,
fontsize_col = 12,
annotation_col = annC,
annotation_colors = list(REPONSE = c(NR = "#7570BE",
R="#F15854",
RP="#882255",
"T"= "#117733"),
real_time_point = c(VT1="deepskyblue",
VT2="gold3",
"T"="#117733")),
color = my_palette,
cutree_rows = 1,
main = "18 gènes avec VT1+VT2",
labels_col = coldata_num,
cluster_cols = T,
cluster_rows = T,)
## 5.2-65 genes VT1+VT2-----
mat_VT1 <- mat_pat_clean[which(mat_pat_clean$real_time_point %in% "VT1"),] #DF avce tout les VT1
mat_VT2 <- mat_pat_clean[which(mat_pat_clean$real_time_point %in% "VT2"),] #DF avce tout les VT1
mat_T <- mat_pat_clean[which(mat_pat_clean$real_time_point %in% "T"),] #DF avec tout les T
mat<-rbind(mat_VT1,mat_VT2)
mat<-rbind(mat,mat_T)
mat_orig<-mat
name_inter_cov_RP_T_gene<-as.data.frame(name_inter_cov_RP_T_gene)    ##creation d'un DF
test <- colnames(mat) %in% name_inter_cov_RP_T_gene$name_inter_cov_RP_T_gene  #creation d'un vecteur logique T F, les T correspondent au nom identique dans les deux
mat<- mat[,test==T]   #ne garde en colone que les True
coldata<-mat_orig[,737:743] # creation du coldata pour les heatmap
coldata_num<- coldata$numero_patient  # ordo
coldata[,1:6]<-NULL # sup des data non utile
mat<-t(mat)  # translation de la matrice
all(rownames(coldata) == colnames(mat)) #verif col et row identique
all(rownames(coldata) %in% colnames(mat)) #attention de verif pas l'ordre mais seulement présence
mat_log<-log1p(mat) # passage en log 1 p pour les heatmap
annC <- data.frame(condition= coldata) # pour les annotation en col pour la heatmap
rownames(annC) <- colnames(mat_log)  # pour les annotation en col pour la heatmap
all(rownames(annC) == colnames(mat)) #vérif du même ordre / position
annC$real_time_point <- mat_orig$real_time_point  # ajout real_time_point
pheatmap(mat_log,
scale="row",
fontsize_row=11,
fontsize_col = 12,
annotation_col = annC,
annotation_colors = list(REPONSE = c(NR = "#7570BE",
R="#F15854",
RP="#882255",
"T"= "#117733"),
real_time_point = c(VT1="deepskyblue",
VT2="gold3",
"T"="#117733")),
color = my_palette,
cutree_rows = 1,
main = "65 gènes avec VT1+VT2",
labels_col = coldata_num,
cluster_cols = T,
cluster_rows = T,)
## 5.3-2 genes VT1+VT2-----
mat_VT1 <- mat_pat_clean[which(mat_pat_clean$real_time_point %in% "VT1"),] #DF avce tout les VT1
mat_VT2 <- mat_pat_clean[which(mat_pat_clean$real_time_point %in% "VT2"),] #DF avce tout les VT1
mat_T <- mat_pat_clean[which(mat_pat_clean$real_time_point %in% "T"),] #DF avec tout les T
mat<-rbind(mat_VT1,mat_VT2)
mat<-rbind(mat,mat_T)
mat_orig<-mat
name_unique_RP_T_gene<-as.data.frame(name_unique_RP_T_gene)    ##creation d'un DF
test <- colnames(mat) %in% name_unique_RP_T_gene$name_unique_RP_T_gene  #creation d'un vecteur logique T F, les T correspondent au nom identique dans les deux
mat<- mat[,test==T]   #ne garde en colone que les True
coldata<-mat_orig[,737:743] # creation du coldata pour les heatmap
coldata_num<- coldata$numero_patient  # ordo
coldata[,1:6]<-NULL # sup des data non utile
mat<-t(mat)  # translation de la matrice
all(rownames(coldata) == colnames(mat)) #verif col et row identique
all(rownames(coldata) %in% colnames(mat)) #attention de verif pas l'ordre mais seulement présence
mat_log<-log1p(mat) # passage en log 1 p pour les heatmap
annC <- data.frame(condition= coldata) # pour les annotation en col pour la heatmap
rownames(annC) <- colnames(mat_log)  # pour les annotation en col pour la heatmap
all(rownames(annC) == colnames(mat)) #vérif du même ordre / position
annC$real_time_point <- mat_orig$real_time_point  # ajout real_time_point
pheatmap(mat_log,
scale="row",
fontsize_row=11,
fontsize_col = 12,
annotation_col = annC,
annotation_colors = list(REPONSE = c(NR = "#7570BE",
R="#F15854",
RP="#882255",
"T"= "#117733"),
real_time_point = c(VT1="deepskyblue",
VT2="gold3",
"T"="#117733")),
color = my_palette,
cutree_rows = 1,
main = "2 gènes avec VT1+VT2",
labels_col = coldata_num,
cluster_cols = F,
cluster_rows = T,)
## 5.4-18+65 genes VT1+VT2- -----
mat_VT1 <- mat_pat_clean[which(mat_pat_clean$real_time_point %in% "VT1"),] #DF avce tout les VT1
mat_VT2 <- mat_pat_clean[which(mat_pat_clean$real_time_point %in% "VT2"),] #DF avce tout les VT1
mat_T <- mat_pat_clean[which(mat_pat_clean$real_time_point %in% "T"),] #DF avec tout les T
mat<-rbind(mat_VT1,mat_VT2)
mat<-rbind(mat,mat_T)
mat_orig<-mat
name_unique_cov_T_gene<-as.data.frame(name_unique_cov_T_gene)    ##creation d'un DF
test <- colnames(mat) %in% name_unique_cov_T_gene$name_unique_cov_T_gene  #creation d'un vecteur logique T F, les T correspondent au nom identique dans les deux
mat_18<- mat[,test==T]   #ne garde en colone que les True
name_inter_cov_RP_T_gene<-as.data.frame(name_inter_cov_RP_T_gene)    ##creation d'un DF
test <- colnames(mat) %in% name_inter_cov_RP_T_gene$name_inter_cov_RP_T_gene  #creation d'un vecteur logique T F, les T correspondent au nom identique dans les deux
mat_65<- mat[,test==T]   #ne garde en colone que les True
mat<-cbind(mat_18,mat_65)
coldata<-mat_orig[,737:743] # creation du coldata pour les heatmap
coldata_num<- coldata$numero_patient  # ordo
coldata[,1:6]<-NULL # sup des data non utile
mat<-t(mat)  # translation de la matrice
all(rownames(coldata) == colnames(mat)) #verif col et row identique
all(rownames(coldata) %in% colnames(mat)) #attention de verif pas l'ordre mais seulement présence
mat_log<-log1p(mat) # passage en log 1 p pour les heatmap
annC <- data.frame(condition= coldata) # pour les annotation en col pour la heatmap
rownames(annC) <- colnames(mat_log)  # pour les annotation en col pour la heatmap
all(rownames(annC) == colnames(mat)) #vérif du même ordre / position
annC$real_time_point <- mat_orig$real_time_point  # ajout real_time_point
pheatmap(mat_log,
scale="row",
fontsize_row=10,
fontsize_col = 12,
annotation_col = annC,
annotation_colors = list(REPONSE = c(NR = "#7570BE",
R="#F15854",
RP="#882255",
"T"= "#117733"),
real_time_point = c(VT1="deepskyblue",
VT2="gold3",
"T"="#117733")),
color = my_palette,
cutree_rows = 1,
main = "Gènes de la réponse covid à VT1 avec clusterisation",
labels_col = coldata_num,
cluster_cols = T,
cluster_rows = T,)
pheatmap(mat_log,
scale="row",
fontsize_row=10,
fontsize_col = 12,
annotation_col = annC,
annotation_colors = list(REPONSE = c(NR = "#7570BE",
R="#F15854",
RP="#882255",
"T"= "#117733"),
real_time_point = c(VT1="deepskyblue",
VT2="gold3",
"T"="#117733")),
color = my_palette,
cutree_rows = 1,
main = "Gènes de la réponse covid à VT1",
labels_col = coldata_num,
cluster_cols = F,
cluster_rows = T,)
## 5.5-2+18+65 genes VT1+VT2- -----
mat_VT1 <- mat_pat_clean[which(mat_pat_clean$real_time_point %in% "VT1"),] #DF avce tout les VT1
mat_VT2 <- mat_pat_clean[which(mat_pat_clean$real_time_point %in% "VT2"),] #DF avce tout les VT1
mat_T <- mat_pat_clean[which(mat_pat_clean$real_time_point %in% "T"),] #DF avec tout les T
mat<-rbind(mat_VT1,mat_VT2)
mat<-rbind(mat,mat_T)
mat_orig<-mat
name_unique_cov_T_gene<-as.data.frame(name_unique_cov_T_gene)    ##creation d'un DF
test <- colnames(mat) %in% name_unique_cov_T_gene$name_unique_cov_T_gene  #creation d'un vecteur logique T F, les T correspondent au nom identique dans les deux
mat_18<- mat[,test==T]   #ne garde en colone que les True
name_inter_cov_RP_T_gene<-as.data.frame(name_inter_cov_RP_T_gene)    ##creation d'un DF
test <- colnames(mat) %in% name_inter_cov_RP_T_gene$name_inter_cov_RP_T_gene  #creation d'un vecteur logique T F, les T correspondent au nom identique dans les deux
mat_65<- mat[,test==T]   #ne garde en colone que les True
name_unique_RP_T_gene<-as.data.frame(name_unique_RP_T_gene)    ##creation d'un DF
test <- colnames(mat) %in% name_unique_RP_T_gene$name_unique_RP_T_gene  #creation d'un vecteur logique T F, les T correspondent au nom identique dans les deux
mat_2<- mat[,test==T]   #ne garde en colone que les True
mat<-cbind(mat_18,mat_65)
mat<-cbind(mat,mat_2)
coldata<-mat_orig[,737:743] # creation du coldata pour les heatmap
coldata_num<- coldata$numero_patient  # ordo
coldata[,1:6]<-NULL # sup des data non utile
mat<-t(mat)  # translation de la matrice
all(rownames(coldata) == colnames(mat)) #verif col et row identique
all(rownames(coldata) %in% colnames(mat)) #attention de verif pas l'ordre mais seulement présence
mat_log<-log1p(mat) # passage en log 1 p pour les heatmap
annC <- data.frame(condition= coldata) # pour les annotation en col pour la heatmap
rownames(annC) <- colnames(mat_log)  # pour les annotation en col pour la heatmap
all(rownames(annC) == colnames(mat)) #vérif du même ordre / position
annC$real_time_point <- mat_orig$real_time_point  # ajout real_time_point
pheatmap(mat_log,
scale="row",
fontsize_row=10,
fontsize_col = 12,
annotation_col = annC,
annotation_colors = list(REPONSE = c(NR = "#7570BE",
R="#F15854",
RP="#882255",
"T"= "#117733"),
real_time_point = c(VT1="deepskyblue",
VT2="gold3",
"T"="#117733")),
color = my_palette,
cutree_rows = 1,
main = "2 + 18 + 65 gènes avec VT1+VT2",
labels_col = coldata_num,
cluster_cols = F,
cluster_rows = T,)
name_unique_cov_T_gene
name_unique_RP_T_gene
name_inter_cov_RP_T_gene
